/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.alyqamar.Contacts.view;

import com.alyqamar.Contacts.dal.dto.ContentJTableModel;
import com.alyqamar.Contacts.dal.dao.dBConnection;
import com.alyqamar.Contacts.dal.dto.Contact;
import com.alyqamar.Contacts.dal.dto.Country;
import com.alyqamar.Contacts.bo.Countries;
import com.alyqamar.Contacts.bo.EG_Numbers;
import com.alyqamar.Contacts.bo.Email;
import com.alyqamar.Contacts.dal.dto.PhoneNumber;
import com.alyqamar.Contacts.bo.TableItems;
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.intellijthemes.FlatOneDarkIJTheme;
import javax.swing.RowFilter;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableRowSorter;

/**
 *
 * @Aly Qamar
 */

/*
Class map:
01- Constructor
02- Generated Code
03- Events
04- Main
05- Variables declaration
06- Setters
07- Getters
08- Table Algorithms
09- Image Converting
10- Filter Algorithms
11- Check input validation
12- Exceptions
 */
public class ContactsJFrame extends javax.swing.JFrame {

//------------------------------01-Constructor----------------------------------
    /**
     * Creates new form ContactsJFrame
     */
    public ContactsJFrame() {
        initComponents();
        //Set Images
        setLogoIconImg();  //Set Frame Icon
        contactPhotoJLabel.setIcon(new ImageIcon(photofilePath));
        setJLabelsIconImg(); // set labels icons
        //Table header
        contentJTable.getTableHeader().setFont(new Font("Roboto medium", Font.BOLD, 15));
        contentJTable.getTableHeader().setOpaque(false);
        contentJTable.getTableHeader().setBackground(new Color(65, 90, 158));
        contentJTable.getTableHeader().setForeground(Color.WHITE);

        //Table Sorting
        contentJTable.setAutoCreateRowSorter(true);

        setConnection();
        UpdateTableItems();
        resetAllTextFields();
    }
//-----------------------------02-Generated Code--------------------------------

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        infoJPanel = new javax.swing.JPanel();
        updateJButton = new javax.swing.JButton();
        deleteJButton = new javax.swing.JButton();
        addJButton = new javax.swing.JButton();
        titleJLabel1 = new javax.swing.JLabel();
        titleJLabel2 = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        titleJLabel3 = new javax.swing.JLabel();
        phoneCountryCodeJTextField = new javax.swing.JTextField();
        contactPhotoJLabel = new javax.swing.JLabel();
        choosePhotoJButton = new javax.swing.JButton();
        numberJTextField = new javax.swing.JTextField();
        countryJComboBox = new javax.swing.JComboBox<>();
        numberExceptionJLabel = new javax.swing.JLabel();
        countryExceptionJLabel = new javax.swing.JLabel();
        titleJLabel5 = new javax.swing.JLabel();
        emailJTextField = new javax.swing.JTextField();
        addressJLabel = new javax.swing.JLabel();
        addressJTextField = new javax.swing.JTextField();
        countryCodeJTextField = new javax.swing.JTextField();
        emailExceptionJLabel = new javax.swing.JLabel();
        nameExceptionJLabel = new javax.swing.JLabel();
        resetJButton = new javax.swing.JButton();
        darkMJRadioButton = new javax.swing.JRadioButton();
        funcJPanel = new javax.swing.JPanel();
        telCompFilterJComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        contentJTable = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        searchJTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Contacts");
        setResizable(false);

        updateJButton.setFont(new java.awt.Font("Roboto Medium", 1, 15)); // NOI18N
        updateJButton.setAutoscrolls(true);
        updateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateJButtonActionPerformed(evt);
            }
        });

        deleteJButton.setFont(new java.awt.Font("Roboto Medium", 1, 15)); // NOI18N
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        addJButton.setFont(new java.awt.Font("Roboto Medium", 1, 16)); // NOI18N
        addJButton.setForeground(new java.awt.Color(65, 90, 158));
        addJButton.setBorderPainted(false);
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        titleJLabel1.setFont(new java.awt.Font("Roboto Medium", 1, 20)); // NOI18N
        titleJLabel1.setForeground(new java.awt.Color(65, 90, 158));
        titleJLabel1.setText("Country");

        titleJLabel2.setFont(new java.awt.Font("Roboto Medium", 1, 20)); // NOI18N
        titleJLabel2.setForeground(new java.awt.Color(65, 90, 158));
        titleJLabel2.setText("number");

        nameJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                nameJTextFieldFocusLost(evt);
            }
        });
        nameJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameJTextFieldActionPerformed(evt);
            }
        });

        titleJLabel3.setFont(new java.awt.Font("Roboto Slab Medium", 1, 20)); // NOI18N
        titleJLabel3.setForeground(new java.awt.Color(65, 90, 158));
        titleJLabel3.setText("name");

        phoneCountryCodeJTextField.setEditable(false);
        phoneCountryCodeJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneCountryCodeJTextFieldActionPerformed(evt);
            }
        });

        choosePhotoJButton.setFont(new java.awt.Font("Roboto Medium", 1, 15)); // NOI18N
        choosePhotoJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choosePhotoJButtonActionPerformed(evt);
            }
        });

        numberJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                numberJTextFieldFocusLost(evt);
            }
        });
        numberJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberJTextFieldActionPerformed(evt);
            }
        });
        numberJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                numberJTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                numberJTextFieldKeyReleased(evt);
            }
        });

        countryJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Country", "Afghanistan", "Aland Islands", "Albania", "Algeria", "AmericanSamoa", "Andorra", "Angola", "Anguilla", "Antarctica", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia, Plurinational State of", "Bosnia and Herzegovina", "Botswana", "Brazil", "British Indian Ocean Territory", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Congo, The Democratic Republic of the Congo", "Cook Islands", "Costa Rica", "Cote d'Ivoire", "Croatia", "Cuba", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands (Malvinas)", "Faroe Islands", "Fiji", "Finland", "France", "French Guiana", "French Polynesia", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Holy See (Vatican City State)", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran, Islamic Republic of Persian Gulf", "Iraq", "Ireland", "Isle of Man", "Israel", "Italy", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Korea, Democratic People's Republic of Korea", "Korea, Republic of South Korea", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lithuania", "Luxembourg", "Macao", "Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia, Federated States of Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "Netherlands Antilles", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Palestinian Territory, Occupied", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn", "Poland", "Portugal", "Puerto Rico", "Qatar", "Romania", "Russia", "Rwanda", "Reunion", "Saint Barthelemy", "Saint Helena, Ascension and Tristan Da Cunha", "Saint Kitts and Nevis", "Saint Lucia", "Saint Martin", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Sudan", "South Georgia and the South Sandwich Islands", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard and Jan Mayen", "Swaziland", "Sweden", "Switzerland", "Syrian Arab Republic", "Taiwan", "Tajikistan", "Tanzania, United Republic of Tanzania", "Thailand", "Timor-Leste", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela, Bolivarian Republic of Venezuela", "Vietnam", "Virgin Islands, British", "Virgin Islands, U.S.", "Wallis and Futuna", "Yemen", "Zambia", "Zimbabwe" }));
        countryJComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                countryJComboBoxItemStateChanged(evt);
            }
        });
        countryJComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                countryJComboBoxFocusLost(evt);
            }
        });
        countryJComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countryJComboBoxMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                countryJComboBoxMouseExited(evt);
            }
        });
        countryJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryJComboBoxActionPerformed(evt);
            }
        });

        numberExceptionJLabel.setText("(Country code) - (number)");

        countryExceptionJLabel.setText("Exception");

        titleJLabel5.setFont(new java.awt.Font("Roboto Medium", 1, 20)); // NOI18N
        titleJLabel5.setForeground(new java.awt.Color(65, 90, 158));
        titleJLabel5.setText("Email");

        emailJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                emailJTextFieldFocusLost(evt);
            }
        });
        emailJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailJTextFieldActionPerformed(evt);
            }
        });
        emailJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                emailJTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                emailJTextFieldKeyTyped(evt);
            }
        });

        addressJLabel.setFont(new java.awt.Font("Roboto Medium", 1, 20)); // NOI18N
        addressJLabel.setForeground(new java.awt.Color(65, 90, 158));
        addressJLabel.setText("Address");

        countryCodeJTextField.setEditable(false);
        countryCodeJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryCodeJTextFieldActionPerformed(evt);
            }
        });

        emailExceptionJLabel.setText("Exception");
        emailExceptionJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                emailExceptionJLabelMouseExited(evt);
            }
        });

        nameExceptionJLabel.setText("Exception");

        resetJButton.setFont(new java.awt.Font("Roboto Medium", 1, 16)); // NOI18N
        resetJButton.setForeground(new java.awt.Color(65, 90, 158));
        resetJButton.setBorderPainted(false);
        resetJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetJButtonActionPerformed(evt);
            }
        });

        darkMJRadioButton.setText("Dark Mode");
        darkMJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                darkMJRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout infoJPanelLayout = new javax.swing.GroupLayout(infoJPanel);
        infoJPanel.setLayout(infoJPanelLayout);
        infoJPanelLayout.setHorizontalGroup(
            infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoJPanelLayout.createSequentialGroup()
                        .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(infoJPanelLayout.createSequentialGroup()
                                .addComponent(titleJLabel2)
                                .addGap(25, 25, 25)
                                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(countryExceptionJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(infoJPanelLayout.createSequentialGroup()
                                            .addComponent(phoneCountryCodeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(numberJTextField))
                                        .addComponent(numberExceptionJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(infoJPanelLayout.createSequentialGroup()
                                .addGap(95, 95, 95)
                                .addComponent(emailExceptionJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(infoJPanelLayout.createSequentialGroup()
                                .addComponent(addressJLabel)
                                .addGap(18, 18, 18)
                                .addComponent(addressJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(infoJPanelLayout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(choosePhotoJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(infoJPanelLayout.createSequentialGroup()
                                        .addComponent(contactPhotoJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(20, 20, 20))))
                            .addGroup(infoJPanelLayout.createSequentialGroup()
                                .addComponent(titleJLabel1)
                                .addGap(18, 18, 18)
                                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameExceptionJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(infoJPanelLayout.createSequentialGroup()
                                        .addComponent(countryCodeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(countryJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoJPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(titleJLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(emailJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(160, 160, 160))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoJPanelLayout.createSequentialGroup()
                        .addComponent(titleJLabel3)
                        .addGap(41, 41, 41)
                        .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(infoJPanelLayout.createSequentialGroup()
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoJPanelLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(updateJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(deleteJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(infoJPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(resetJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(darkMJRadioButton)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        infoJPanelLayout.setVerticalGroup(
            infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoJPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(darkMJRadioButton))
                .addGap(18, 18, 18)
                .addComponent(contactPhotoJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(choosePhotoJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleJLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(nameExceptionJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleJLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countryJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countryCodeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countryExceptionJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleJLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneCountryCodeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numberJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numberExceptionJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleJLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(emailExceptionJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
        );

        telCompFilterJComboBox.setFont(new java.awt.Font("Roboto Medium", 0, 15)); // NOI18N
        telCompFilterJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Filter TEL companies", "We (EG)", "Vodafone (EG)", "Orange (EG)", "Etisalat (EG)" }));
        telCompFilterJComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                telCompFilterJComboBoxItemStateChanged(evt);
            }
        });
        telCompFilterJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                telCompFilterJComboBoxActionPerformed(evt);
            }
        });

        contentJTable.setAutoCreateRowSorter(true);
        contentJTable.setFont(new java.awt.Font("Roboto Medium", 0, 18)); // NOI18N
        contentJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "photo", "name", "number", "email", "address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        contentJTable.setRowHeight(100);
        contentJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                contentJTableMousePressed(evt);
            }
        });
        contentJTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                contentJTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                contentJTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(contentJTable);
        if (contentJTable.getColumnModel().getColumnCount() > 0) {
            contentJTable.getColumnModel().getColumn(0).setResizable(false);
            contentJTable.getColumnModel().getColumn(1).setResizable(false);
            contentJTable.getColumnModel().getColumn(2).setResizable(false);
            contentJTable.getColumnModel().getColumn(3).setResizable(false);
            contentJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jToolBar1.setRollover(true);

        searchJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchJTextFieldActionPerformed(evt);
            }
        });
        searchJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchJTextFieldKeyReleased(evt);
            }
        });
        jToolBar1.add(searchJTextField);
        jToolBar1.add(jLabel1);

        javax.swing.GroupLayout funcJPanelLayout = new javax.swing.GroupLayout(funcJPanel);
        funcJPanel.setLayout(funcJPanelLayout);
        funcJPanelLayout.setHorizontalGroup(
            funcJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(funcJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, funcJPanelLayout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(telCompFilterJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(funcJPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 765, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        funcJPanelLayout.setVerticalGroup(
            funcJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(funcJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telCompFilterJComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(funcJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(funcJPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

//----------------------------------03-Events------------------------------------

    private void darkMJRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_darkMJRadioButtonActionPerformed
        // TODO add your handling code here:
        if (darkMJRadioButton.isSelected()) {
            EventQueue.invokeLater(() -> {
                FlatOneDarkIJTheme.setup();
                FlatLaf.updateUI();
            });
        } else {
            EventQueue.invokeLater(() -> {
                FlatIntelliJLaf.setup();
                FlatLaf.updateUI();
            });
        }
    }//GEN-LAST:event_darkMJRadioButtonActionPerformed

    private void searchJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchJTextFieldActionPerformed

    private void telCompFilterJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_telCompFilterJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_telCompFilterJComboBoxActionPerformed

    private void choosePhotoJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choosePhotoJButtonActionPerformed

        JFileChooser imgch = new JFileChooser();
        imgch.setDialogTitle("Choose Contact Photo");

        FileNameExtensionFilter imgFilter = new FileNameExtensionFilter("Images", "png", "jpg", "jpeg");
        imgch.setFileFilter(imgFilter);

        int chBool = imgch.showOpenDialog(this);
        if (chBool == imgch.APPROVE_OPTION) {
            File f = imgch.getSelectedFile();
            photofilePath = f.getAbsolutePath();
            photofileName = f.getName();
            ImageIcon imgIcon = new ImageIcon(new ImageIcon(photofilePath).getImage()
                    .getScaledInstance(contactPhotoJLabel.getWidth(), contactPhotoJLabel.getHeight(), Image.SCALE_SMOOTH));
            contactPhotoJLabel.setIcon(imgIcon);
            JOptionPane.showMessageDialog(this, "Photo has been uploaded!");
        } else {
            JOptionPane.showMessageDialog(this, "You didnot choose any photo to upload!");
        }

    }//GEN-LAST:event_choosePhotoJButtonActionPerformed

    private void phoneCountryCodeJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneCountryCodeJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneCountryCodeJTextFieldActionPerformed

    private void nameJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameJTextFieldActionPerformed

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed

        //  Get inputs data from user
        String name = nameJTextField.getText();
        String number = numberJTextField.getText();
        String email = emailJTextField.getText();
        String address = addressJTextField.getText();
        String country = countryJComboBox.getSelectedItem().toString();
        String countryCode = countryCodeJTextField.getText();
        String phoneCountryCode = phoneCountryCodeJTextField.getText();
        String telComp = EG_Num.getTelCompName(number);

        int code = getHashingNumber(number);

        if (emptyTextFields()) {
            JOptionPane.showMessageDialog(this, "please Enter All Data!");
        } //        else if (numberDigits<=10  digt without Code) { // negative integer code condition
        //        //            JOptionPane.showMessageDialog(this, "Try again with right code which greater than zero!", "Alert", JOptionPane.WARNING_MESSAGE);
        //        //        } 
        //        else if (duplicatedContactsName()) {// check if this name is stored with another item
        //            // name should be unique because it's search key
        //            JOptionPane.showMessageDialog(this, "Contact name is already in the table!", "Alert", JOptionPane.WARNING_MESSAGE);
        //
        //        } 
        else {
            try {
                if (isDefaultPhoto()) {
                    Image img = new ImageIcon(defaultPhotofilePath).getImage();
                    BufferedImage bi = getBufferedImage(img);
                    ByteArrayInputStream bais = getByteArrayInputStream(bi);

                    pst = con.prepareStatement("insert into contact_info(photo,name,number,email,address,country,country_code,number_code,tel_company,code)values(?,?,?,?,?,?,?,?,?,?);");
                    pst.setBlob(1, bais);
                } else {
                    FileInputStream photoFIS = new FileInputStream(new File(photofilePath));

                    pst = con.prepareStatement("insert into contact_info(photo,name,number,email,address,country,country_code,number_code,tel_company,code)values(?,?,?,?,?,?,?,?,?,?);");
                    pst.setBlob(1, photoFIS);
                }

                pst.setString(2, name);
                pst.setInt(3, Integer.parseInt(number));
                pst.setString(4, email);
                pst.setString(5, address);
                pst.setString(6, country);
                pst.setString(7, countryCode);
                pst.setString(8, phoneCountryCode);
                pst.setString(9, telComp);
                pst.setInt(10, code);

                int k = pst.executeUpdate();

                if (k == 1) {
                    UpdateTableItems();
                    resetAllTextFields();
                    JOptionPane.showMessageDialog(this, "successfully added!");
                } else {
                    JOptionPane.showMessageDialog(this, "Unfortunately, your item didn't add. Try again!", "Alert", JOptionPane.WARNING_MESSAGE);
                }
                pst.close();
            } catch (SQLException ex) {
                Logger.getLogger(ContactsJFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ContactsJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_addJButtonActionPerformed

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed
        int currentCode = currentContact.getCode();
        int a = JOptionPane.showConfirmDialog(this, "Are you sure you want delete this item from table?");
        if (a == JOptionPane.YES_OPTION) {
            try {

                pst = con.prepareStatement("delete from contact_info where code = ? ");
                pst.setString(1, String.valueOf(currentCode));

                int k = pst.executeUpdate();

                if (k == 1) {
                    resetAllTextFields();
                    UpdateTableItems();
                    JOptionPane.showMessageDialog(this, "successfully deleted!");
                } else {
                    JOptionPane.showMessageDialog(this, "Unfortunately, your item didn't deleted. Try again!", "Alert", JOptionPane.WARNING_MESSAGE);
                }
                pst.close();
            } catch (SQLException ex) {
                Logger.getLogger(ContactsJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_deleteJButtonActionPerformed

    private void updateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateJButtonActionPerformed
        //  Get inputs data from user
        String name = nameJTextField.getText();
        String number = numberJTextField.getText();

        String email = emailJTextField.getText();
        String address = addressJTextField.getText();

        String country = countryJComboBox.getSelectedItem().toString();
        String countryCode = countryCodeJTextField.getText();
        String phoneCountryCode = phoneCountryCodeJTextField.getText();
        String telComp = EG_Num.getTelCompName(number);

        int code = getHashingNumber(number);
        int currentCode = currentContact.getCode();

        if (emptyTextFields()) {
            JOptionPane.showMessageDialog(this, "Please fill All Data!");
        } //        else if (numberDigits<=10  digt without Code) { // negative integer code condition
        //            JOptionPane.showMessageDialog(this, "Try again with right code which greater than zero!", "Alert", JOptionPane.WARNING_MESSAGE);
        //        } 
        //        else if (duplicatedContactsName()) {// check if this name is stored with another item
        //            // name should be unique because it's search key
        //            JOptionPane.showMessageDialog(this, "Contact name is already in the table!", "Alert", JOptionPane.WARNING_MESSAGE);
        //
        //        } 
        else {
            try {
                pst = con.prepareStatement("update contact_info set photo = ?, name = ?, number = ?, email = ?,address = ?,country = ?,country_code = ?,number_code = ?,tel_company = ?,code=? where code = ?");

                if (photofilePath.equals(defaultPhotofilePath)) {//user didn't choose a profile photo
                    Image img = currentContact.getImg().getImage();
                    //convert image to input Stream
                    BufferedImage bi = getBufferedImage(img);
                    ByteArrayInputStream bais = getByteArrayInputStream(bi);
                    //Update Sql statement
                    pst.setBlob(1, bais);

                } else {
                    FileInputStream photoFIS = new FileInputStream(new File(photofilePath));
                    pst.setBlob(1, photoFIS);

                }
                pst.setString(2, name);
                pst.setInt(3, Integer.parseInt(number));
                pst.setString(4, email);
                pst.setString(5, address);
                pst.setString(6, country);
                pst.setString(7, countryCode);
                pst.setString(8, phoneCountryCode);
                pst.setString(9, telComp);
                pst.setInt(10, code);
                pst.setInt(11, currentCode);

                int k = pst.executeUpdate();

                if (k == 1) {
                    UpdateTableItems();
                    resetAllTextFields();
                    JOptionPane.showMessageDialog(this, "successfully updated!");
                } else {
                    JOptionPane.showMessageDialog(this, "Unfortunately, your item didn't updated. Try again!", "Alert", JOptionPane.WARNING_MESSAGE);
                }
                pst.close();
            } catch (SQLException ex) {
                Logger.getLogger(ContactsJFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ContactsJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_updateJButtonActionPerformed

    private void numberJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numberJTextFieldActionPerformed

    private void contentJTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contentJTableMousePressed
        resetAllTextFields();
        changeAction();
    }//GEN-LAST:event_contentJTableMousePressed

    private void contentJTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contentJTableKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_contentJTableKeyPressed

    private void contentJTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contentJTableKeyReleased
        resetAllTextFields();
        changeAction();
    }//GEN-LAST:event_contentJTableKeyReleased

    private void emailJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailJTextFieldActionPerformed

    private void countryJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_countryJComboBoxActionPerformed

    private void countryJComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_countryJComboBoxItemStateChanged
        getCountryInfo();
    }//GEN-LAST:event_countryJComboBoxItemStateChanged

    private void countryJComboBoxMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countryJComboBoxMouseExited

    }//GEN-LAST:event_countryJComboBoxMouseExited

    private void countryJComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countryJComboBoxMouseClicked

    }//GEN-LAST:event_countryJComboBoxMouseClicked

    private void countryCodeJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryCodeJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_countryCodeJTextFieldActionPerformed

    private void emailJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailJTextFieldFocusLost

    }//GEN-LAST:event_emailJTextFieldFocusLost

    private void emailExceptionJLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emailExceptionJLabelMouseExited

    }//GEN-LAST:event_emailExceptionJLabelMouseExited

    private void emailJTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailJTextFieldKeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_emailJTextFieldKeyTyped

    private void emailJTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailJTextFieldKeyPressed
        isEmail();

    }//GEN-LAST:event_emailJTextFieldKeyPressed

    private void numberJTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberJTextFieldKeyPressed
        isPhoneNumber();
    }//GEN-LAST:event_numberJTextFieldKeyPressed

    private void numberJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberJTextFieldKeyReleased
        isPhoneNumber();
    }//GEN-LAST:event_numberJTextFieldKeyReleased

    private void nameJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameJTextFieldFocusLost
        isEmptyNameException();
    }//GEN-LAST:event_nameJTextFieldFocusLost

    private void countryJComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_countryJComboBoxFocusLost
        isEmptyNameException();
        isEmptyCountryException();
    }//GEN-LAST:event_countryJComboBoxFocusLost

    private void numberJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numberJTextFieldFocusLost
        isEmptyNameException();
        isEmptyCountryException();
        isEmptyNumberException();
    }//GEN-LAST:event_numberJTextFieldFocusLost

    private void telCompFilterJComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_telCompFilterJComboBoxItemStateChanged
        // TODO add your handling code here:
        String selectedValue = telCompFilterJComboBox.getSelectedItem().toString();
        if (selectedValue.equals("Filter TEL companies")) {
            UpdateTableItems();
        } else {
            //filter(String.valueOf(getTelCompKey(selectedValue))); //not efficient for ex: name = aly10 / omar15
            filterTelCompany(selectedValue, getContactList());

        }

    }//GEN-LAST:event_telCompFilterJComboBoxItemStateChanged

    private void searchJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchJTextFieldKeyReleased
        // TODO add your handling code here:
        String searchKey = searchJTextField.getText();
        search(searchKey);
    }//GEN-LAST:event_searchJTextFieldKeyReleased

    private void resetJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetJButtonActionPerformed
        resetAllTextFields();
        UpdateTableItems();
    }//GEN-LAST:event_resetJButtonActionPerformed

//----------------------------------04-Main-------------------------------------
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContactsJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContactsJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContactsJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContactsJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //Dark mode
        FlatIntelliJLaf.setup();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ContactsJFrame().setVisible(true);
            }
        });
    }
//-------------------------05-Variables declaration-----------------------------

    EG_Numbers EG_Num = new EG_Numbers();
    TableItems tableItems = new TableItems();

    //images path
    //photo variables
    private String photofileName = "";
    private String photofilePath = "img\\contactPhoto.png";
    private String defaultPhotofilePath = "img\\contactPhoto.png";
//    private int currentCode = 0;
    private Contact currentContact;
    private ArrayList<Contact> currentContactList;

    //db variables
    Connection con = null;
    Statement st = null;
    PreparedStatement pst = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JLabel addressJLabel;
    private javax.swing.JTextField addressJTextField;
    private javax.swing.JButton choosePhotoJButton;
    private javax.swing.JLabel contactPhotoJLabel;
    private javax.swing.JTable contentJTable;
    private javax.swing.JTextField countryCodeJTextField;
    private javax.swing.JLabel countryExceptionJLabel;
    private javax.swing.JComboBox<String> countryJComboBox;
    private javax.swing.JRadioButton darkMJRadioButton;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JLabel emailExceptionJLabel;
    private javax.swing.JTextField emailJTextField;
    private javax.swing.JPanel funcJPanel;
    private javax.swing.JPanel infoJPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel nameExceptionJLabel;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JLabel numberExceptionJLabel;
    private javax.swing.JTextField numberJTextField;
    private javax.swing.JTextField phoneCountryCodeJTextField;
    private javax.swing.JButton resetJButton;
    private javax.swing.JTextField searchJTextField;
    private javax.swing.JComboBox telCompFilterJComboBox;
    private javax.swing.JLabel titleJLabel1;
    private javax.swing.JLabel titleJLabel2;
    private javax.swing.JLabel titleJLabel3;
    private javax.swing.JLabel titleJLabel5;
    private javax.swing.JButton updateJButton;
    // End of variables declaration//GEN-END:variables

//---------------------------------06-Setters-----------------------------------
    private void resetAllTextFields() {
        //photoAdded = false;
        photofilePath = "img\\contactPhoto.png";
        contactPhotoJLabel.setIcon(new ImageIcon("img\\contactPhoto.png"));
        nameJTextField.setText("");
        numberJTextField.setText("");
        emailJTextField.setText("");
        addressJTextField.setText("");
        countryJComboBox.setSelectedItem("Select Country");
        //Reset Exception
        nameExceptionJLabel.setText("");
        countryExceptionJLabel.setText("");
        numberExceptionJLabel.setText("");
        emailExceptionJLabel.setText("");

    }

    private void setLogoIconImg() {
        String path = "img/contacts.png";
        Image img = new ImageIcon(path).getImage();
        this.setIconImage(img);
    }

    private void setJLabelsIconImg() {
        resetJButton.setIcon(new ImageIcon("img\\reset.png"));
        addJButton.setIcon(new ImageIcon("img\\addContact.png"));
        choosePhotoJButton.setIcon(new ImageIcon("img\\choosePhoto.png"));
        updateJButton.setIcon(new ImageIcon("img\\update.png"));
        deleteJButton.setIcon(new ImageIcon("img\\remove.png"));
    }

    private void setConnection() {
        dBConnection dBCon = new dBConnection();
        dBCon.Connect();
        con = dBCon.getCon();

    }

//--------------------------------07-Getters------------------------------------
    private ArrayList<Contact> getContactList() {

        ArrayList<Contact> ContactList = new ArrayList<>();
        try {
            pst = con.prepareStatement("SELECT* FROM contact_info;");
            ResultSet rs = pst.executeQuery();

            Contact ct;
            while (rs.next()) {
                ct = new Contact(rs.getInt("code"), rs.getString("name"), rs.getInt("number"),
                        rs.getBytes("photo"), rs.getString("email"), rs.getString("address"),
                        rs.getString("country"), rs.getString("country_code"), rs.getString("number_code"), rs.getString("tel_company"));

                ContactList.add(ct);
            }
            pst.close();
        } catch (SQLException ex) {
            Logger.getLogger(ContactsJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        currentContactList = ContactList;
        return ContactList;
    }

    private int getHashingNumber(String number) {
        PhoneNumber pn = new PhoneNumber(Integer.parseInt(phoneCountryCodeJTextField.getText()),
                Integer.parseInt(number.substring(0, 2)), Integer.parseInt(number.substring(3, 5)),
                Integer.parseInt(number.substring(6, 9)));

        return pn.hashCode();
    }

    private Country getCountryInfo() {
        Country c = new Country();
        String selectedCountry = countryJComboBox.getSelectedItem().toString();
        if (selectedCountry.equals("Select Country")) {
            countryCodeJTextField.setText("");
            phoneCountryCodeJTextField.setText("");

            countryExceptionJLabel.setText("Select your Country !");
            countryExceptionJLabel.setForeground(Color.red);
        } else {
            Countries cs = new Countries();
            c = cs.FindCountryInf(selectedCountry);
            countryCodeJTextField.setText(c.getCode());
            phoneCountryCodeJTextField.setText(c.getDial_code());
            countryExceptionJLabel.setText("");

        }
        return c;
    }

    private ArrayList<String> getGroups(String type) {
        ArrayList<String> groupsList = new ArrayList<>();
        if (!type.equals("")) {
            groupsList.add(type);
        }
        try {
            pst = con.prepareStatement("SELECT group_name FROM groupTable;");
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                groupsList.add(rs.getString("group_name"));
            }

        } catch (SQLException ex) {
            Logger.getLogger(ContactsJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return groupsList;
    }

    private void getGroupNumbersFromDB(String groupName) {
        String numbers = "";
        Set<Integer> groupNumbers = new HashSet<Integer>();
        try {
            pst = con.prepareStatement("SELECT numbers FROM groupTable where group_name = ?;");
            pst.setString(1, groupName);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                numbers = rs.getString("numbers");
            }
            pst.close();
        } catch (SQLException ex) {
            Logger.getLogger(ContactsJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        convertNumbersToSet(numbers);
//        return groupNumbers;
    }

    private void convertNumbersToSet(String numbers) {
        Set<Integer> groupNumbers = new HashSet<Integer>();
//        for (int i = 0; i < ; i++) {
//            numbers.split(",");
//        }
    }

    private ArrayList<Integer> getSelectedNumbersFromTable() {
        int column = 2;
        ArrayList<Integer> SelectedNumbers = new ArrayList<>();
        int[] rows = contentJTable.getSelectedRows();
        for (int i = 0; i < rows.length; i++) {
            Object selectedvalue = contentJTable.getModel().getValueAt(rows[i], column);
            SelectedNumbers.add((Integer) selectedvalue);
        }
        return SelectedNumbers;
    }

//-----------------------------08-Table Algorithms------------------------------
    private void changeAction() {

        ArrayList<Contact> contactList = getContactList();
        ContentJTableModel d1 = (ContentJTableModel) contentJTable.getModel();

        int SelectIndex = contentJTable.getSelectedRow();

        if (SelectIndex > -1) {//null value equal -1
            currentContact = contactList.get(SelectIndex);

            ImageIcon ic = new ImageIcon(contactList.get(SelectIndex).getImg().getImage()
                    .getScaledInstance(contactPhotoJLabel.getWidth(), contactPhotoJLabel.getHeight(), Image.SCALE_SMOOTH));
            contactPhotoJLabel.setIcon(ic);

            nameJTextField.setText(currentContact.getName());
            numberJTextField.setText(String.valueOf(currentContact.getNumber()));
            countryJComboBox.setSelectedItem(currentContact.getCountry());
            emailJTextField.setText(currentContact.getEmail());
            addressJTextField.setText(currentContact.getAddress());

        }

    }

    private void UpdateTableItems() {
        ArrayList<Contact> contactList = getContactList();
        tableItems.displayTableItems(contactList, contentJTable);
    }
//----------------------------09-Image Converting-------------------------------

    private static BufferedImage getBufferedImage(Image img) {
        if (img instanceof BufferedImage) {
            return (BufferedImage) img;
        }

        BufferedImage bimage = new BufferedImage(img.getWidth(null),
                img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

        Graphics2D bGr = bimage.createGraphics();
        bGr.drawImage(img, 0, 0, null);
        bGr.dispose();

        // Return the buffered image
        return bimage;
    }

    private static ByteArrayInputStream getByteArrayInputStream(BufferedImage bi) {
        ByteArrayOutputStream baos = null;
        try {
            baos = new ByteArrayOutputStream();
            ImageIO.write(bi, "png", baos);
            baos.close();
        } catch (IOException e) {
            Logger.getLogger(ContactsJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
        }
        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
        return bais;
    }

//----------------------------10-Filter Algorithms-------------------------------
    private void search(String key) {
        ContentJTableModel cTM = (ContentJTableModel) contentJTable.getModel();
        TableRowSorter<ContentJTableModel> tRS = new TableRowSorter<>(cTM);
        contentJTable.setRowSorter(tRS);
        tRS.setRowFilter(RowFilter.regexFilter(key));
    }

    private void filter(String key) {
        ContentJTableModel cTM = (ContentJTableModel) contentJTable.getModel();
        TableRowSorter<ContentJTableModel> tRS = new TableRowSorter<>(cTM);
        contentJTable.setRowSorter(tRS);
        tRS.setRowFilter(RowFilter.regexFilter(key));
    }

    private void filterTelCompany(String companyName, ArrayList<Contact> contactList) {
        companyName = companyName.substring(0, companyName.indexOf(' '));
        ArrayList<Contact> filteredContactList = new ArrayList<>();

        for (int i = 0; i < contactList.size(); i++) {
            if (contactList.get(i).getTelComp().equals(companyName)) {
                filteredContactList.add(contactList.get(i));
            }
        }

        if (filteredContactList.size() < 1) {
            telCompFilterJComboBox.setSelectedItem("Filter TEL companies");
            JOptionPane.showMessageDialog(this, "Unfortunately, not found any Contact have " + companyName + " number !", "Alert", JOptionPane.INFORMATION_MESSAGE);
        } else {
            tableItems.displayTableItems(filteredContactList, contentJTable);
        }

    }

//-------------------------11-Check input validation----------------------------
    private boolean emptyTextFields() {
        String name = nameJTextField.getText();
        String number = numberJTextField.getText();

        boolean empty = name.equals("") || number.equals("");

        return empty;
    }

    private boolean isDefaultPhoto() {
        return photofilePath.equals(defaultPhotofilePath);
    }

    private boolean isEmail() {
        String email = emailJTextField.getText();
        Email m = new Email();
        if (m.checkValidation(email)) {
            emailExceptionJLabel.setText("");
            return true;
        } else {
            emailExceptionJLabel.setText("name@domain.com");
            emailExceptionJLabel.setForeground(Color.red);
            return false;

        }
    }

    private boolean isPhoneNumber() {
        String number = numberJTextField.getText();
        int len = number.length();
        if (len < 0) {
            numberExceptionJLabel.setText("Please enter valid Number!");
            numberExceptionJLabel.setForeground(Color.red);
            return false;
        } else if (len >= 2 && (!isValidTelComp(number))) {
            numberExceptionJLabel.setText("Enter valid number!");
            numberExceptionJLabel.setForeground(Color.red);

        } else if (len < 10) {
            numberExceptionJLabel.setText("Number must be 10 digits!");
            numberExceptionJLabel.setForeground(Color.red);
            return false;
        } else if (len == 10) {
            numberExceptionJLabel.setText("(Country code) - (number)");
            numberExceptionJLabel.setForeground(Color.black);
            return true;
        } else if (len > 10) {
            numberExceptionJLabel.setText("Phone Number never be more than 10 digits!");
            numberExceptionJLabel.setForeground(Color.red);

            return false;
        }

        return false;
    }

    private boolean isValidTelComp(String number) {
        if (EG_Num.getTelCompName(number).equals("")) {
            return false;
        } else {
            return true;
        }
    }

    private boolean duplicatedContactsName() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

//-------------------------------12-Exceptions----------------------------------
    private boolean isEmptyNameException() {
        String name = nameJTextField.getText();
        if (name.equals("")) {
            nameExceptionJLabel.setText("You must fill name field!");
            nameExceptionJLabel.setForeground(Color.red);
            return true;
        } else {
            nameExceptionJLabel.setText("");
            nameExceptionJLabel.setForeground(Color.black);
        }
        return false;
    }

    private boolean isEmptyCountryException() {
        String selectedCountry = countryJComboBox.getSelectedItem().toString();
        if (selectedCountry.equals("Select Country")) {

            countryExceptionJLabel.setText("Please fill Country field!");
            countryExceptionJLabel.setForeground(Color.red);
            return true;
        } else {
            countryExceptionJLabel.setText("");
            countryExceptionJLabel.setForeground(Color.black);
        }
        return false;
    }

    private boolean isEmptyNumberException() {
        String name = numberJTextField.getText();
        if (name.equals("")) {
            numberExceptionJLabel.setText("You must fill number field!");
            numberExceptionJLabel.setForeground(Color.red);
            return true;
        } else {
            numberExceptionJLabel.setText("");
            numberExceptionJLabel.setForeground(Color.black);
        }
        return false;
    }
}
